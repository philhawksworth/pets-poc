---
import Layout from '../layouts/Layout.astro';
import Pet from '../components/Pet.astro';
import petData from '../data/pets.json';

function compareName(a, b) {
  return a.name.localeCompare(b.name);
}
const pets = petData.sort(compareName);

---

<Layout title="Welcome to Astro.">
	<main>


    <h2>Pets of Netlify</h2>
      <ul role="list" class="link-card-grid">
      {pets.map((item) => (
        <Pet
          name={item.name}
          image={item.photo}
        />
      ))}
    </ul>



	</main>
</Layout>


<script>


// Make it simple to swap parts of a URL attribute on an element
function updateAttributeURL(element, attr, swapOut, swapIn) {
  var url = element.getAttribute(attr);
  url = url.replace(swapOut, swapIn);
  element.setAttribute(attr, url);
}


// Update the image source on elements in the picture element
function loadImage(picture) {

  var sources = picture.children;
  var loadingPath = "images/tiny";
  var sizes = ["large","medium","small"];

  for(var s=0; s<sources.length; s++) {
    // update the src or srcset urls
    if (sources[s].hasAttribute("srcset")) {
      updateAttributeURL(sources[s], "srcset", loadingPath, "images/"+sizes[s] );
    } else {
      updateAttributeURL(sources[s], "src", loadingPath, "images/"+sizes[s] );
    }

    // remove the lazy-initial class when the full image is loaded to unblur
    sources[s].addEventListener('load', image => {
      image.target.closest("picture").classList.remove("lazy-initial")
    }, false);
  }

}

// Stop observing this image and load its source
function lazyLoad(elements) {
  elements.forEach(item => {
    if (item.intersectionRatio > 0) {
      observer.unobserve(item.target);
      loadImage(item.target);
    };
  });
};


// Set up the intersection observer to detect when to define
// and load the real image source
var options = {
  rootMargin: "100px",
  threshold: 1.0
};
var observer = new IntersectionObserver(lazyLoad, options);

// Watch for all pictures with a "lazy" class
var pictures = document.querySelectorAll('picture.lazy');
pictures.forEach(pic => {
  observer.observe(pic);
});

</script>


<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 1200px;
		max-width: calc(100% - 2rem);
		font-size: 20px;
		line-height: 1.6;
	}

	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
    text-shadow: 2px 2px 2px #000;;
	}


	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 20px;
		padding: 0;
	}
</style>
